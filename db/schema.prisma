generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

generator jsonSchema {
    provider                 = "prisma-json-schema-generator"
    keepRelationScalarFields = "true"
    schemaId                 = "some-schema-id"
}

generator kysely {
    provider = "prisma-generator-kysely-mysql"
    output   = "kysely-client"
    query    = "ssl={\"rejectUnauthorized\":true}"
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String? @db.Text
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String? @db.Text
    oauth_token        String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id            String         @id @default(cuid())
    name          String?        @db.Text
    email         String?        @unique
    emailVerified DateTime?
    image         String?        @db.Text
    accounts      Account[]
    defaultOrgId  String?
    signupReason  String?
    defaultSiteId Int?
    sites         SitesUsers[]
    Subscription  Subscription[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// XXX paddle

model Product {
    isSandbox Boolean
    paddleId  String  @id // this paddleis can also be my id, i didn't forecast i would need products outside of Paddle
    name      String
    active    Boolean @default(true)
    image     String?

    // platform       ProductPlatform?
    billing_type   String // month | year | lifetime
    billing_period Int // 1

    trial_days Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subscriptions Subscription[]
    prices        Price[]

    // lifetimeCodes LifetimeCode[]
}

model Price {
    isSandbox  Boolean
    paddleId   String
    product    Product  @relation(fields: [paddleId], references: [paddleId], onDelete: Cascade)
    currency   String // USD
    unitAmount Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([paddleId, currency, unitAmount])
}

model Subscription {
    product              Product            @relation(fields: [productId], references: [paddleId])
    user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    paddleUserId         String
    isSandbox            Boolean
    id                   String             @id @default(cuid())
    userId               String
    productId            String
    paddleSubscriptionId String             @unique
    status               SubscriptionStatus
    cancel_url           String?
    update_url           String?
    paddleEmail          String?

    marketing_consent Boolean?

    paused_at     DateTime?
    paused_reason String?
    paused_from   DateTime?

    start_date DateTime?

    unit_price String?

    currency                    String?
    canceled_at                 DateTime?
    cancellation_effective_date DateTime?

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([productId])
}

enum SubscriptionStatus {
    past_due
    active
    paused
    trialing
    deleted
}

// custom rows

model SitesUsers {
    userId String
    siteId Int
    role   UserRole

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)

    @@id([userId, siteId])
}

enum UserRole {
    ADMIN
    GUEST
}

model SiteInviteLink {
    createdAt DateTime @default(now())
    key       String   @id
    siteId    Int
    site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model Site {
    id   Int     @id @default(autoincrement())
    name String?

    users SitesUsers[]

    domains Domain[]

    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @default(now()) @updatedAt
    routes          Route[]
    invitationLinks SiteInviteLink[]
}

model Domain {
    id         Int        @id @default(autoincrement())
    host       String     @unique
    siteId     Int
    domainType DomainType
    site       Site       @relation(fields: [siteId], references: [id], onDelete: Cascade)

    @@index([siteId])
}

enum DomainType {
    customDomain
    internalDomain
}

model Route {
    id        Int    @id @default(autoincrement()) // use Int to preserve memory if a site has many routes
    siteId    Int
    basePath  String // if basePath is / then it is a fallback route
    targetUrl String @db.Text
    site      Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

    @@index([siteId])
}
